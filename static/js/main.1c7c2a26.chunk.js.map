{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","state","AQI","hours","cigs","this","setState","forceUpdate","className","Header","as","Container","Input","fluid","label","value","onChange","e","Number","currentTarget","Button","primary","onClick","AQI2cigs","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAgEeA,E,kDAtDb,WAAaC,GAAa,IAAD,8BACvB,cAAMA,IAEDC,MAAQ,CACXC,IAAK,IACLC,MAAO,GACPC,KAAM,SANe,E,uDAUb,MAEWC,KAAKJ,MACpBG,EAHI,EAEJF,IAFI,EAECC,MAEXE,KAAKC,SAAS,CAAEF,KAAMA,IACtBC,KAAKE,gB,+BAGI,IAAD,SACqBF,KAAKJ,MAA1BC,EADA,EACAA,IAAKC,EADL,EACKA,MAAOC,EADZ,EACYA,KACpB,OACE,yBAAKI,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,2CACA,6BACA,6BACA,kBAACC,EAAA,EAAD,CAAWH,UAAU,WACnB,kBAACI,EAAA,EAAD,CAAOC,OAAK,EACVC,MAAM,MACNC,MAAOb,EACPc,SAAU,SAAAC,GAAC,OAAI,EAAKX,SAAS,CAACJ,IAAKgB,OAAOD,EAAEE,cAAcJ,YAE5D,6BACA,6BACA,kBAACH,EAAA,EAAD,CAAOC,OAAK,EACVC,MAAM,gBACNC,MAAOZ,EACPa,SAAU,SAAAC,GAAC,OAAI,EAAKX,SAAS,CAACH,MAAOe,OAAOD,EAAEE,cAAcJ,YAE9D,6BACA,6BACA,kBAACK,EAAA,EAAD,CAAQC,SAAO,EAACC,QAASjB,KAAKkB,SAASC,KAAKnB,OAA5C,aAGA,6BACA,6BACA,sDACA,kBAACI,EAAA,EAAD,CAAQC,GAAG,MAAMN,GACjB,+C,GApDQqB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c7c2a26.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport 'semantic-ui-react'\nimport { Container, Header, Input, Button } from 'semantic-ui-react'\n\nclass App extends React.Component<\n  {},\n  { AQI: number; hours: number; cigs: any }\n> {\n\n  constructor (props: any) {\n    super(props)\n\n    this.state = {\n      AQI: 150,\n      hours: 24,\n      cigs: \"stuff\"\n    }\n  }\n\n  AQI2cigs () {\n    // placeholder while I get react shit working\n    var { AQI, hours } = this.state\n    const cigs = AQI + hours\n    this.setState({ cigs: cigs })\n    this.forceUpdate()\n  }\n\n  render () {\n    const { AQI, hours, cigs } = this.state\n    return (\n      <div className='App'>\n        <Header as='h1'>UNFINISHED AQI to Cigarettes Calculator</Header>\n        <br />\n        <br />\n        <Container className='max-200'>\n          <Input fluid \n            label='AQI' \n            value={AQI}\n            onChange={e => this.setState({AQI: Number(e.currentTarget.value) })} \n          />\n          <br />\n          <br />\n          <Input fluid \n            label='Hours Exposed' \n            value={hours}\n            onChange={e => this.setState({hours: Number(e.currentTarget.value) })} \n            />\n          <br />\n          <br />\n          <Button primary onClick={this.AQI2cigs.bind(this)}>\n            Calculate\n          </Button>\n          <br />\n          <br />\n          <p>It's like you've smoked</p>\n          <Header as='h2'>{cigs}</Header>\n          <p>cigarettes</p>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}