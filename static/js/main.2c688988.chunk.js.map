{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","utils.js"],"names":["App","props","state","AQI","hours","cigs","particles","calcAQI","this","setState","calcPM25","cigsLegible","toFixed","className","Header","as","Container","Input","fluid","label","value","onChange","e","Number","currentTarget","Button","primary","onClick","AQI2cigs","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","exports","__esModule","AQITablePM25","code","unit","period","concentrations","min","max","index","inputConcentration","breakpoints","find","conc","undefined","Error","getBreakpointsParticles","PM_observed","PM_min","PM_max","AQI_min","getBreakpoints","AQI_max","log"],"mappings":"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","file":"static/js/main.2c688988.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport 'semantic-ui-react'\nimport { calcAQI, calcPM25 } from './utils'\nimport { Container, Header, Input, Button } from 'semantic-ui-react'\n\nclass App extends React.Component<\n  {},\n  { AQI: number; hours: number; cigs: any; particles: number }\n> {\n  constructor (props: any) {\n    super(props)\n\n    this.state = {\n      AQI: 0,\n      hours: 24,\n      cigs: 0,\n      particles: 0\n    }\n  }\n\n  particles2AQI () {\n    const AQI = calcAQI(this.state.particles)\n    this.setState({ AQI })\n  }\n\n  AQI2cigs () {\n    // placeholder while I get react shit working\n    var { AQI, hours } = this.state\n\n    // Estimated particles for 24 hours\n    const PM24h = calcPM25(AQI)\n\n    // Source: http://berkeleyearth.org/archive/air-pollution-and-cigarette-equivalence/\n    const particlesPerCigPerHours = 22\n    const cigs = (PM24h / particlesPerCigPerHours / 24) * hours\n\n    this.setState({ cigs })\n  }\n\n  render () {\n    const { AQI, hours, cigs, particles } = this.state\n    const cigsLegible = cigs.toFixed(2)\n\n    return (\n      <div className='App'>\n        <Header as='h1'>AQI to Cigarettes Calculator</Header>\n        <br />\n        <br />\n        <Container className='max-200'>\n          <Input\n            fluid\n            label='AQI'\n            value={AQI}\n            onChange={e =>\n              this.setState({ AQI: Number(e.currentTarget.value) })\n            }\n          />\n          <br />\n          <br />\n          <Input\n            fluid\n            label='Hours Exposed'\n            value={hours}\n            onChange={e =>\n              this.setState({ hours: Number(e.currentTarget.value) })\n            }\n          />\n          <br />\n          <br />\n          <Button primary onClick={this.AQI2cigs.bind(this)}>\n            Calculate\n          </Button>\n          <br />\n          <br />\n          <p>It's like you've smoked</p>\n          <Header as='h2'>{cigsLegible}</Header>\n          <p>cigarettes</p>\n          {/* <hr></hr>\n          <Header>Calculate AQI</Header>\n\n          <br />\n          <Input\n            fluid\n            label='PM2.5 Particles'\n            value={particles}\n            onChange={e =>\n              this.setState({ particles: Number(e.currentTarget.value) })\n            }\n          />\n          <br />\n          <br />\n          <Button primary onClick={this.particles2AQI.bind(this)}>\n            Calculate\n          </Button>\n          <Header>{AQI}</Header> */}\n\n          <p className=\"red\">DISCLAIMER: this thing is unfinished and currently not quite accurate for some (???) values.</p>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nexports.__esModule = true;\nexports.AQITablePM25 = {\n    code: 'PM2.5',\n    unit: 'ug/m3',\n    period: '24h',\n    concentrations: [\n        {\n            min: 0,\n            max: 15,\n            index: {\n                min: 0,\n                max: 50\n            }\n        },\n        {\n            min: 15,\n            max: 40,\n            index: {\n                min: 50,\n                max: 100\n            }\n        },\n        {\n            min: 40,\n            max: 65,\n            index: {\n                min: 100,\n                max: 150\n            }\n        },\n        {\n            min: 65,\n            max: 150,\n            index: {\n                min: 150,\n                max: 200\n            }\n        },\n        {\n            min: 150,\n            max: 250,\n            index: {\n                min: 200,\n                max: 300\n            }\n        },\n        {\n            min: 250,\n            max: 500,\n            index: {\n                min: 300,\n                max: 400\n            }\n        },\n        {\n            min: 500,\n            max: 99999999999,\n            index: {\n                min: 400,\n                max: 99999999999\n            }\n        }\n    ]\n};\nfunction getBreakpointsParticles(particles) {\n    var breakpoints = exports.AQITablePM25.concentrations.find(function (conc) {\n        if (conc.index.min <= particles && conc.index.max > particles) {\n            return conc;\n        }\n    });\n    if (breakpoints === undefined) {\n        throw new Error(\"concentration out of bounds: \" + particles);\n    }\n    return breakpoints;\n}\nfunction calcAQI(inputConcentration) {\n    var breakpoints = getBreakpointsParticles(inputConcentration); // should be\n    var PM_observed = inputConcentration;\n    var PM_min = breakpoints.min;\n    var PM_max = breakpoints.max;\n    var AQI_min = breakpoints.index.min;\n    var AQI_max = breakpoints.index.max;\n    // solved for AQI from https://www.epa.gov/sites/production/files/2014-05/documents/zell-aqi.pdf\n    var AQI = ((PM_observed - PM_min) * (AQI_max - AQI_min)) / (PM_max - PM_min) + AQI_min;\n    return AQI;\n}\nexports.calcAQI = calcAQI;\nfunction getBreakpoints(AQI) {\n    var breakpoints = exports.AQITablePM25.concentrations.find(function (conc) {\n        if (conc.index.min <= AQI && conc.index.max > AQI) {\n            return conc;\n        }\n    });\n    if (breakpoints === undefined) {\n        throw new Error(\"AQI out of bounds. AQI: \" + AQI);\n    }\n    return breakpoints;\n}\n// calculates PM 2.5 concentration per 24 hours based on AQI\n// None of this works currently\nfunction calcPM25(AQI) {\n    var breakpoints = getBreakpoints(AQI);\n    var PM_min = breakpoints.min;\n    var PM_max = breakpoints.max;\n    var AQI_min = breakpoints.index.min;\n    var AQI_max = breakpoints.index.max;\n    console.log(breakpoints);\n    // const PM =\n    //   (PM_min * AQI_max - PM_min * AQI - AQI_min * PM_max + PM_max * AQI) /\n    //   (PM_max - AQI_min)\n    var PM = ((PM_max - PM_min) * (AQI - AQI_min)) / (AQI_max - AQI_min) + PM_min;\n    // console.log(\n    //   `For AQI of ${AQI}, found particle concentration of ${PM} for 24 hours`\n    // )\n    return PM;\n}\nexports.calcPM25 = calcPM25;\n"],"sourceRoot":""}